import { v4 as uuid } from 'uuid'; 

export async function createPaymentModel(usuarioId, compraId, method, creditCardId) {

    let status = 'pendente'; 

    let pixQRCodeURL = null;
    
    let boletoURL = null;

    let paymentMethodId = null; 

  
    const paymentId = uuid();

    if (method === 'creditCard') {

        const cartaoCredito = await prisma.cartaocredito.findUnique({

            where: { id: creditCardId }

        });

        if (!cartaoCredito) {
            throw new Error('Cartão não encontrado!');
        }

        if (cartaoCredito.usuarioId !== usuarioId) {

            throw new Error('Cartão de crédito não pertencente ao usuário!');

        }

        const paymentResponse = await paymentApi.processPayment(cartaoCredito, amount);

        status = 'Aprovado';

        paymentMethodId = cartaoCredito.id; // Armazena o ID do cartão de crédito

    } else if (method === 'pix') {
   
        const pixId = uuid(); // Gera um UUID para o pagamento Pix

        pixQRCodeURL = `https://api-pix.com/gerarQR/${pixId}`; 

        status = 'Aguardando';

        paymentMethodId = pixId; 

    } else if (method === 'boleto') {
        
        const boletoId = uuid(); 
        
        boletoURL = `https://api-boleto.com/gerarBoleto/${boletoId}`; 
        
        status = 'Aguardando';
        paymentMethodId = boletoId;
        
    } else {
        throw new Error('Método de pagamento inválido!');
    }


    const payment = await prisma.payment.create({
        data: {
            id: paymentId,
            usuarioId,
            paymentMethod: method, 
            status,
            amount: 0, 
            compraId,
            timestamp: new Date(),
            pixQRCodeURL,
            boletoURL,
            creditCardId: method === 'creditCard' ? creditCardId : null, // Armazena o ID do cartão de crédito se o método for cartão
        }
    });

    await prisma.compra.update({
        where: { id: compraId },
        data: {
            status: 'aceita',
        }
    });

    return { payment, pixQRCodeURL, boletoURL, paymentMethodId };
}
