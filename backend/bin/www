#!/usr/bin/env node

import app from '../app.js'; // Certifique-se de que o caminho está correto
import debug from 'debug';
import http from 'http';

// Configuração de depuração
const log = debug('backend:server');

// Obtenção da porta do ambiente e armazenamento no Express
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Criação do servidor HTTP
const server = http.createServer(app);

// Escuta na porta fornecida, em todas as interfaces de rede
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normaliza uma porta em número, string ou false
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // pipe nomeado
        return val;
    }

    if (port >= 0) {
        // número da porta
        return port;
    }

    return false;
}

// Listener de eventos para o erro do servidor HTTP "error"
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // tratar erros específicos de escuta com mensagens amigáveis
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Listener de eventos para o servidor HTTP "listening"
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    log('Listening on ' + bind);
}
